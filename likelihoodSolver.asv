% Function to solve likelihood problem
% Params
%   Fground_mean - mean of foreground clusters
%   Fground_cov - sigma/covariance of foreground clusters
%   Bground_mean - mean of background clusters
%   Bground_cov - sigma/covariance of background clusters
%   pixel_val - current pixel value
%   pixel_sigma - covar of pixel
%   initial_alpha_value - pre-set alpha value
%   max_iterations - pre-set maximum iterations
%   min_likelihood - pre-set minimum likelihood
function [F,B,alpha]=likelihoodSolver(Fground_mean, ...
    Fground_cov, ...
    Bground_mean, ...
    Bground_cov, ...
    pixel_val, ...
    pixel_sigma, ...
    initial_alpha_val, ...
    max_iterations, ...
    min_likelihood)
  
I=eye(3);
vals=[];

% Looping thround the clustered values
for i = 1:size(Fground_mean, 2)

    % Getting Foreground mean value at i
    i_Fground_mean = Fground_mean(:, i);
    inverse_cov_i_Foreground = inv(Fground_cov(:,:,i));
            
    for j = 1:size(Bground_mean,2)
        
        mubi=Bground_mean(:,j);
        invSigmabi=inv(Bground_cov(:,:,j));
        
        alpha=initial_alpha_val;
        iter=1;
        lastLike=-realmax;

        while (true)
            
            % solve for F,B
            A=[inverse_cov_i_Foreground+I*(alpha^2/pixel_sigma^2) , I*alpha*(1-alpha)/pixel_sigma^2; 
               I*((alpha*(1-alpha))/pixel_sigma^2)  , invSigmabi+I*(1-alpha)^2/pixel_sigma^2];
             
            b=[inverse_cov_i_Foreground*i_Fground_mean+pixel_val*(alpha/pixel_sigma^2); 
               invSigmabi*mubi+pixel_val*((1-alpha)/pixel_sigma^2)];
           
            X=A\b;
            F=max(0,min(1,X(1:3)));
            B=max(0,min(1,X(4:6)));
            
            % solve for alpha
            alpha=max(0,min(1,((pixel_val-B)'*(F-B))/sum((F-B).^2)));
            
            % calculate likelihood
            L_C=-sum((pixel_val-alpha*F-(1-alpha)*B).^2)/pixel_sigma;
            L_F=-((F-i_Fground_mean)'*inverse_cov_i_Foreground*(F-i_Fground_mean))/2;
            L_B=-((B-mubi)'*invSigmabi*(B-mubi))/2;
            like=L_C+L_F+L_B;
            
%             fprintf('like=%.2f, iter=%d\n',like,iter);
%             z(iter)=like;
            
            if iter>=max_iterations || abs(like-lastLike)<=min_likelihood
                break;
            end
            
            lastLike=like;
            iter=iter+1;
        end
        
        % we need only keep the maximal value, but for now we keep all
        % values anyway as there are not many, and we can investigate them
        % later on
        val.F=F;
        val.B=B;
        val.alpha=alpha;
        val.like=like;
        vals=[vals val];
    end
end

% return maximum likelihood estimations
[t,ind]=max([vals.like]);
F=vals(ind).F;
B=vals(ind).B;
alpha=vals(ind).alpha;

