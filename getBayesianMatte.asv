function [F, B, alpha] = getBayesianMatte(img, trimap, c_obj)

    % Setting masks for foreground, background and unknown
    bgmask = (trimap==0); % Background where trimap values = 0
    fgmask = (trimap==1); % Foreground where trimap values = 1
    unkmask= ~bgmask&~fgmask; % If neither, then unknown

    % initialize Foreground values
    F = img; 
    F(repmat(~fgmask,[1,1,3])) = 0;

    % Initialize Background values
    B=img; 
    B(repmat(~bgmask,[1,1,3])) = 0;

    % Initialize alpha values
    alpha = zeros(size(trimap));
    alpha(fgmask) = 1;
    alpha(unkmask) = NaN;

    % Initializing total unknown points
    nUnknown=sum(unkmask(:));

    % Gaussian Weighting
    g = fspecial('gaussian', c_obj.N, c_obj.sigma); 
    g = g/max(g(:));

    % square structuring element for eroding the unknown region(s)
    se=strel('square',3);

    n=1;
    unkreg=unkmask;
    iter = 1;

    while ((n < nUnknown) && (iter < 100)) % - 1000
        unkreg=imerode(unkreg,se);
        unkpixels=~unkreg&unkmask;
        [Y,X]=find(unkpixels); 

        for i=1:length(Y)
            fprintf('processing %d/%d\n',n,nUnknown);

            % take current pixel
            x=X(i); y=Y(i);
            c = reshape(img(y,x,:),[3,1]);

            % take surrounding alpha values
            a = runWindow(alpha,x,y,c_obj.N);
        end
    end

end